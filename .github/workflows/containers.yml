name: Containers

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build (${{ matrix.function }}, ${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        function:
          - initializer
          - finalizer
        arch:
          - amd64
          - arm64
        include:
          - function: verifier
            arch: amd64
            target: tailscale
          - function: verifier
            arch: arm64
            target: tailscale
    permissions:
      attestations: write
      contents: read
      id-token: write
    steps:
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        if: github.event_name != 'pull_request'
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.event_name }}-${{ github.run_id }}-${{ github.job }}
          aws-region: us-east-1

      - uses: aws-actions/amazon-ecr-login@v2
        if: github.event_name != 'pull_request'
        id: ecr
        with:
          registry-type: public

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ steps.ecr.outputs.registry }}/krantz/tailfed/${{ matrix.function }}
          flavor: |
            suffix=-${{ matrix.arch }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - uses: docker/build-push-action@v6
        id: build
        with:
          platforms: linux/${{ matrix.arch }}
          target: ${{ matrix.target || 'bare' }}
          build-args: |
            FUNCTION=${{ matrix.function }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha

      - name: Export digest
        run: |          
          mkdir -p "${{ runner.temp }}/digests"
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.function }}-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge (${{ matrix.function }})
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        function:
          - initializer
          - verifier
          - finalizer
    permissions:
      attestations: write
      contents: read
      id-token: write
    steps:
      - uses: docker/setup-buildx-action@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.event_name }}-${{ github.run_id }}-${{ github.job }}
          aws-region: us-east-1

      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr
        with:
          registry-type: public

      - uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.function }}-*
          merge-multiple: true

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ steps.ecr.outputs.registry }}/krantz/tailfed/${{ matrix.function }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Push manifest
        working-directory: ${{ runner.temp }}/digests
        run: |
          short_sha=$(cut -c1-8 <<< "$GITHUB_SHA")
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ steps.ecr.outputs.registry }}/krantz/tailfed/${{ matrix.function }}:${{ steps.meta.outputs.version }}@sha256:%s ' *)

      - name: Inspect manifest
        run: |
          docker buildx imagetools inspect \
            ${{ steps.ecr.outputs.registry }}/krantz/tailfed/${{ matrix.function }}:${{ steps.meta.outputs.version }}
