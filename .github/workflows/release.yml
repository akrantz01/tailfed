name: Release

on:
  push:
    branches:
      - main
    tags:
      - v*

jobs:
  generate-next-release:
    name: Generate Next Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_PLEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_PLEASE_PRIVATE_KEY }}

      - uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          release-type: go
          skip-github-release: true
          skip-labeling: true

  prepare:
    name: Prepare ${{ matrix.goos }} ${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux binaries
          - os: ubuntu-latest
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm
          - os: ubuntu-latest
            goos: linux
            goarch: arm64

          # MacOS binaries
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64

          # Windows binaries
          - os: windows-latest
            goos: windows
            goarch: "386"
          - os: windows-latest
            goos: windows
            goarch: amd64
    env:
      flags: ""
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          cache: true
          cache-dependency-path: go.sum
          go-version-file: go.mod

      - name: For nightly release
        if: github.ref == 'refs/heads/main'
        run: |
          echo "flags=--nightly" >> "$GITHUB_ENV"

      - uses: actions/cache@v4
        with:
          path: dist/${{ matrix.goos }}_${{ matrix.goarch }}
          key: release-prepare-${{ matrix.goos }}_${{ matrix.goarch }}${{ env.flags }}-${{ github.sha }}
          enableCrossOsArchive: true

      - uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: ~> v2
          args: release --clean --split ${{ env.flags }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: sigstore/cosign-installer@v3.8.1
      - uses: anchore/sbom-action/download-syft@v0
      - uses: actions/setup-go@v5
        with:
          cache: true
          cache-dependency-path: go.sum
          go-version-file: go.mod

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.event_name }}-${{ github.run_id }}-${{ github.job }}
          aws-region: us-east-1

      - name: Release
        uses: goreleaser/goreleaser-action@v6
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          distribution: goreleaser-pro
          version: ~> v2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Release (Nightly)
        uses: goreleaser/goreleaser-action@v6
        if: github.ref == 'refs/heads/main'
        with:
          distribution: goreleaser-pro
          version: ~> v2
          args: release --clean --nightly
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - uses: actions/attest-build-provenance@v2
        continue-on-error: true  # TODO: remove once repository is public
        with:
          subject-checksums: ./dist/checksums.txt
